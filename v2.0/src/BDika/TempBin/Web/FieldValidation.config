<?xml version="1.0" encoding="utf-8" ?>
<validators>
  <validator name="HasValue" message="MustHaveValue">
    <code>
      <![CDATA[
      if(val) val = val.toString().replace(/\s/ig,"");
      return (val && val.length > 0);
      ]]>
    </code>
  </validator>
  <validator name="IsValidRedirectURL" message="InvalidURL">
    <code>
      <![CDATA[
      if(val) val = val.toString().replace(/\s/ig,"");
      return (val && val.length > 0);
      ]]>
    </code>
  </validator>
  <validator name="IsInt32AndHasValue" message="FrmErr_FileTooBig">
    <code>
      <![CDATA[
        return ($validators["HasValue"].test(fld,val) && val.toString().match(/^[0-9]*$/gi) != null);
      ]]>
    </code>
    <restrict>
      <![CDATA[
        var f = function(e) {
          if (e.which && isCommandCharacter(e.which) == false && isCharacterMatch(e.which, /^[0-9]/) == false) e.preventDefault();
          var v = $(this).val();
          var w = removeUnmatchedCharacters(v, /[^0-9]/);
          if (w == "" || w == undefined || w == null) w = 0;
          if ($(this).attr("IsInt32AndHasValue_min")) w = Math.max(parseInt($(this).attr("IsInt32AndHasValue_min")), parseInt(w));
          if ($(this).attr("IsInt32AndHasValue_max")) w = Math.min(parseInt($(this).attr("IsInt32AndHasValue_max")), parseInt(w));
          if (w != v) {
            if (e.preventDefault) e.preventDefault();
            $(this).val(w);
          }
        };
        return fld.keypress(f).keyup(f).change(f);
      ]]>
    </restrict>
    <depends>
      <depend>HasValue</depend>
    </depends>
  </validator>
  <validator name="Email" message="Email">
    <code>
      <![CDATA[
        return ($validators["HasValue"].test(fld,val) && val.toString().match(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/gi) != null);
      ]]>
    </code>
    <depends>
      <depend>HasValue</depend>
    </depends>
    <restrict>
      <![CDATA[
        return fld.defaultRestrict(245);
      ]]>
    </restrict>
  </validator>
  <validator name="Password" message="Password">
    <code>
      <![CDATA[
        return ($validators["HasValue"].test(fld,val) && val.toString().match(/^[A-Z0-9._%+!$&\^\-]{6,16}$/gi) != null);
      ]]>
    </code>
    <depends>
      <depend>HasValue</depend>
    </depends>
    <restrict>
      <![CDATA[
        return fld.defaultRestrict(16,/[^A-Z0-9._%+!$&\^\-]/gi);
      ]]>
    </restrict>
  </validator>


  <validator name="FirstOrLastName" message="FirstOrLastName">
    <code>
      <![CDATA[
        return ($validators["HasValue"].test(fld,val) && val.toString().match(/^[A-Z]{2,25}$/gi) != null);
      ]]>
    </code>
    <depends>
      <depend>HasValue</depend>
    </depends>
    <restrict>
      <![CDATA[
        return fld.defaultRestrict(25,/[^A-Z]/gi);
      ]]>
    </restrict>
  </validator>


  <validator name="Address" message="MustHaveValue">
    <code>
      <![CDATA[
        return ($validators["HasValue"].test(fld,val));
      ]]>
    </code>
    <depends>
      <depend>HasValue</depend>
    </depends>
  </validator>


  <validator name="City" message="MustHaveValue">
    <code>
      <![CDATA[
        return ($validators["HasValue"].test(fld,val));
      ]]>
    </code>
    <depends>
      <depend>HasValue</depend>
    </depends>
  </validator>
  <validator name="City_e" message="MustHaveValue">
    <code>
      <![CDATA[
        return true;
      ]]>
    </code>
    <depends>
      <depend>HasValue</depend>
    </depends>
  </validator>


  <validator name="State" message="MustHaveValue">
    <code>
      <![CDATA[
        return ($validators["HasValue"].test(fld,val));
      ]]>
    </code>
    <depends>
      <depend>HasValue</depend>
    </depends>
  </validator>


  <validator name="Country" message="MustHaveValue">
    <code>
      <![CDATA[
        return ($validators["HasValue"].test(fld,val));
      ]]>
    </code>
    <depends>
      <depend>HasValue</depend>
    </depends>
  </validator>


  <validator name="ZipCode" message="MustHaveValue">
    <code>
      <![CDATA[
        return ($validators["HasValue"].test(fld,val) && val.toString().match(/^[0-9]*$/gi) != null);
      ]]>
    </code>
    <restrict>
      <![CDATA[
        return fld.defaultRestrict(5,/^[^0-9]*$/gi);
      ]]>
    </restrict>
    <depends>
      <depend>HasValue</depend>
    </depends>
  </validator>

  <validator name="Date" message="Date">
    <code>
      <![CDATA[
      return ($validators["HasValue"].test(fld,val) && val.toString().match(/^[0-9]{1,2}\/[0-9]{1,2}\/[0-9]{2,4}$/gi) != null);
      ]]>
    </code>
    <depends>
      <depend>HasValue</depend>
    </depends>
  </validator>

  <validator name="Date_e" message="Date">
    <code>
      <![CDATA[
      return ($validators["Date"].test(fld,val) || val == "");
      ]]>
    </code>
    <depends>
      <depend>Date</depend>
    </depends>
  </validator>

  <validator name="DateLargerThan" message="DateAfter">
    <code>
      <![CDATA[
      if (fld.attr("DateLargerThan_s")) {
          var s, e = undefined;
          var fld2 = fld.parents("fieldset").find("input[name=" + fld.attr("DateLargerThan_s") + "]");
          if (fld2 && $validators["Date"].test(fld2, fld2.val())) s = new Date(fld2.val());
          if ($validators["Date"].test(fld, val)) e = new Date(fld.val());
          if (s && e && s > e) {return false;
          } else if (s && e && s <= e) {return true;
          } else if (s || e) {return false;}
      }
      return true;
      ]]>
    </code>
    <depends>
      <depend>Date_e</depend>
    </depends>
  </validator>

  <validator name="OnlyJPGGIFPNG" message="OnlyJPGGIFPNG">
    <code>
      <![CDATA[
        return ($validators["HasValue"].test(fld, val) && val.toString().match(/.*?\.(jpg|jpeg|giff|gif|png)$/gi) != null);
      ]]>
    </code>
    <depends>
      <depend>HasValue</depend>
    </depends>
  </validator>
</validators>