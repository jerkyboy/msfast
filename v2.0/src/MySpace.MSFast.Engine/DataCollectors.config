<?xml version="1.0" encoding="utf-8" ?>
<config>
	<global>
		<PageDataCollector>
			<![CDATA[
        function alert() {return true;}
        function confirm() {return true;} 
        function onerror(){return true;}
        window.onerror = function(){return true;}
		
		function PageDataCollector(_tid,_totalp,_rurl,_reurl,_nurl)
		{
		    this.requestUrl = _rurl;
		    this.requestEncodedUrl = _reurl;
			this.nextURL = _nurl;
		    this.testId = _tid;
		    this.breaks = _totalp;
		
			this._collectors = [];
			
			this._callHandler = function(_fn,_ar){
				for(var i = 0 ; i < this._collectors.length; i++){
					try{
						if(this._collectors[i][_fn]){
							this._collectors[i][_fn](_ar);
						}
					}catch(e){}
				}
			};
			
			this._redirectPage = function(_u){
				try
				{
					window.external.ExecuteJs("redirect", _u);
				}
				catch(e)
				{
				}
			};
			
			this._doNext = function(){
				if(this.nextURL && this.nextURL != "" && this.nextURL != top.location.href){
					this._redirectPage(this.nextURL);
				}else{
          this.onTestEnded();
				}
			};
			
			this._checkIfAllDone = function(){
				var alldone = 0;
				var inst = this;
				alldone = setInterval(function(){
					for(var i = 0 ; i < inst._collectors.length; i++){
						try{
							if(inst._collectors[i].isFinished){
								if(inst._collectors[i].isFinished() == false){
									return;
								}
							}
						}catch(e){}
					}
					clearInterval(alldone);
					inst._doNext();
				},250);
			};
			
			this.addCollector = function(_ls){
				this._collectors.push(_ls);
			};
			
      this.onStartingTest = function(){
				this._callHandler("onStartingTest");
        try{window.external.ExecuteJs("signal_test_started",$pdc.testId);}catch(e){}
        this._redirectPage(this.nextURL);
			};
      
      this.onTestEnded = function(){
				this._callHandler("onTestEnded");
        try{window.external.ExecuteJs("signal_test_ended",$pdc.testId);}catch(e){}
      };
      
      this.onLoadingFirstCollectionPage = function(){
				this._callHandler("onLoadingFirstCollectionPage");
				this._redirectPage(this.nextURL);
			};
			
			this.onInit = function(){this._callHandler("onInit");};
			this.onStartDocument = function(){this._callHandler("onStartDocument");};
			this.onStartHtml = function(){this._callHandler("onStartHtml");};
			this.onStartHead = function(){this._callHandler("onStartHead");};
			this.onEndHead = function(){this._callHandler("onEndHead");};
			this.onStartBody = function(){this._callHandler("onStartBody");};
			this.onSegment = function(s){this._callHandler("onSegment",{segmentId:s});};
			this.onEndBody = function(){this._callHandler("onEndBody");};
			this.onEndHtml = function(){this._callHandler("onEndHtml");};
			this.onEndDocument = function(){this._callHandler("onEndDocument");this._checkIfAllDone();};
		}
    ]]>
		</PageDataCollector>
		
		<PageDataCollector_Constructor><![CDATA[var $pdc = new PageDataCollector({0},{1},"{2}","{3}","{4}");]]></PageDataCollector_Constructor>
		<PageDataCollector_Event_OnInit><![CDATA[$pdc.onInit();]]></PageDataCollector_Event_OnInit>

    <PageDataCollector_Event_OnStartingTest><![CDATA[setTimeout("$pdc.onStartingTest();",200);]]></PageDataCollector_Event_OnStartingTest>
    <PageDataCollector_Event_OnLoadingFirstCollectionPage><![CDATA[setTimeout("$pdc.onLoadingFirstCollectionPage();",200);]]></PageDataCollector_Event_OnLoadingFirstCollectionPage>
    
    <PageDataCollector_Event_OnStartDocument ><![CDATA[$pdc.onStartDocument();]]></PageDataCollector_Event_OnStartDocument>
		<PageDataCollector_Event_OnStartHtml><![CDATA[$pdc.onStartHtml();]]></PageDataCollector_Event_OnStartHtml>
		<PageDataCollector_Event_OnStartHead><![CDATA[$pdc.onStartHead();]]></PageDataCollector_Event_OnStartHead>
		<PageDataCollector_Event_OnEndHead><![CDATA[$pdc.onEndHead();]]></PageDataCollector_Event_OnEndHead>
		<PageDataCollector_Event_OnStartBody><![CDATA[$pdc.onStartBody();]]></PageDataCollector_Event_OnStartBody>
		<PageDataCollector_Event_OnSegment><![CDATA[$pdc.onSegment({0});]]></PageDataCollector_Event_OnSegment>
		<PageDataCollector_Event_OnEndBody><![CDATA[$pdc.onEndBody();]]></PageDataCollector_Event_OnEndBody>
		<PageDataCollector_Event_OnEndHtml><![CDATA[$pdc.onEndHtml();]]></PageDataCollector_Event_OnEndHtml>
		<PageDataCollector_Event_OnEndDocument><![CDATA[$pdc.onEndDocument();]]></PageDataCollector_Event_OnEndDocument>
    
    
    
    <EmptyHTML>
      <![CDATA[<html>
				<head>
					<script>
					{0}
					</script>
				</head>
				<body>
				</body>
				<script>
          {1}
				</script>
			</html>]]>
		</EmptyHTML>
    
	</global>
	<collectors>
		<collector name="Screenshots_Small">
		<![CDATA[
        $pdc.addCollector({
          onSegment : function(e){
            try{window.external.ExecuteJs("getSnapshot", ((e && e.segmentId) ? e.segmentId : "x" + Math.round(Math.random()*100000) + "x") + "~248~183~0");}catch(e){}
          }
        });
		]]>
		</collector>

		<collector name="Progress_Tracker_Screenshots">
		<![CDATA[
		$pdc.addCollector({
			onSegment : function(e){
				try{window.external.ExecuteJs("onProgress", "1;" + e.segmentId + ";" + $pdc.breaks);}catch(e){}
			}
		});
		]]>
		</collector>

		
		
		
		<collector name="Progress_Tracker_Render">
		<![CDATA[
		$pdc.addCollector({
			onSegment : function(e){
				try{window.external.ExecuteJs("onProgress", "0;" + e.segmentId + ";" + $pdc.breaks);}catch(e){}
			}
		});
		]]>
		</collector>
		
		
		<collector name="Start_Download_Tracking_Using_Proxy">
		<![CDATA[
		$pdc.addCollector({
			onStartingTest : function(){
				var getXMLHttpRequest = function(){
				  if( typeof XMLHttpRequest == "undefined" ){
					try { return new ActiveXObject("Msxml2.XMLHTTP.6.0") } catch(e) {}
					try { return new ActiveXObject("Msxml2.XMLHTTP.3.0") } catch(e) {}
					try { return new ActiveXObject("Msxml2.XMLHTTP") } catch(e) {}
					try { return new ActiveXObject("Microsoft.XMLHTTP") } catch(e) {}
				 }else{
				  return new XMLHttpRequest();
				 }
				}
				var client = getXMLHttpRequest();
				client.open("GET", "/?START_TRACKING=" + $pdc.testId + "~" + $pdc.requestEncodedUrl, false);
				client.send();
			}
		});
		]]>
		</collector>

		<collector name="Stop_Download_Tracking_Using_Proxy">
		<![CDATA[
		$pdc.addCollector({
			onEndDocument : function(){
				var getXMLHttpRequest = function(){
				  if( typeof XMLHttpRequest == "undefined" ){
					try { return new ActiveXObject("Msxml2.XMLHTTP.6.0") } catch(e) {}
					try { return new ActiveXObject("Msxml2.XMLHTTP.3.0") } catch(e) {}
					try { return new ActiveXObject("Msxml2.XMLHTTP") } catch(e) {}
					try { return new ActiveXObject("Microsoft.XMLHTTP") } catch(e) {}
				 }else{
				  return new XMLHttpRequest();
				 }
				}
				var client = getXMLHttpRequest();
				client.open("GET", "/?STOP_TRACKING=" + $pdc.testId + "~" + $pdc.requestEncodedUrl, false);
				client.send();
			}
		});
		]]>
		</collector>

		<collector name="Start_Browser_Performance_Tracking">
		<![CDATA[
		$pdc.addCollector({
			onLoadingFirstCollectionPage : function(){
				window.external.ExecuteJs("startperftest","");
			}
		});
		]]>
		</collector>

		<collector name="Stop_Browser_Performance_Tracking">
		<![CDATA[
		$pdc.addCollector({
			onEndDocument : function(){
				window.external.ExecuteJs("endperftest","perfdump_" + $pdc.testId + ".dat");
			}
		});
		]]>
		</collector>

		<collector name="Clear_Browser_Cache">
		<![CDATA[
		var clearCache = function(){window.external.ExecuteJs("clearcache", "");};
		$pdc.addCollector({
			onLoadingFirstCollectionPage : clearCache,
			onEndDocument : clearCache
		});
		]]>
		</collector>

		<collector name="Track_Page_Render_Segments">
		<![CDATA[
        var _collectedRenderData = "";        
        window.onload = function(){markRenderTest("onload");}        
        document.onreadystatechange = function(){
          var rs = document.readyState;
          if(rs == "uninitialized"){	 markRenderTest("Ready State Uninitialized");
          }else if(rs == "loading"){	 markRenderTest("Ready State Loading");
          }else if(rs == "loaded"){		 markRenderTest("Ready State Loaded");
          }else if(rs == "interactive"){ markRenderTest("Ready State Interactive");
          }else if(rs == "complete"){	 markRenderTest("Ready State Complete"); }
        }        
        function getEpoch(){ 
			return (new Date()/1000)*1000; 
		}
        function markRenderTest(_t){
          _collectedRenderData += ((_t) ? _t  : "") + ":" + getEpoch() + ";"; 
        }        
        $pdc.addCollector({
          onEndHead		: function(){ markRenderTest("onEndHead"); },
          onStartBody	: function(){ markRenderTest("onStartBody"); },
          onSegment		: function(e){ markRenderTest("onSegment(" + e.segmentId +")"); },
          onEndBody		: function(){ markRenderTest("onEndBody"); },
          onEndHtml		: function(){ markRenderTest("onEndHtml"); },
          onEndDocument : function(){ 
			markRenderTest("onEndDocument"); 
			window.external.ExecuteJs("saveData", _collectedRenderData);
		  }
		});
		]]>
		</collector>
	</collectors>
</config>
