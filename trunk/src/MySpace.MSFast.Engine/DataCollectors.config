<?xml version="1.0" encoding="utf-8" ?>
<config>
  <global>
      <jsmain>
        <![CDATA[
        function alert() {return true;}
        function confirm() {return true;} 
        function onerror(){return true;}
        window.onerror = function(){return true;}
        function PageDataCollector(_tid,_totalp,_test,_rurl,_reurl){
          this.requestUrl = _rurl;
          this.requestEncodedUrl = _reurl;
          this.testId = _tid;
          this.breaks = _totalp;
          this.tests = _test;
          this.listeners = [];
          this.nextCollect = function(_u){this.redirectPage(_u);};
          this.addListener = function(_ls){this.listeners.push(_ls);};
          this.init = function(){for(var i = 0 ; i < this.listeners.length; i++){try{if(this.listeners[i].init){this.listeners[i].init();}}catch(e){}}};
          this.endSection = function(_id,_t){this.onProgress(_id);for(var i = 0 ; i < this.listeners.length; i++){try{if(this.listeners[i].endSection){this.listeners[i].endSection(_id,_t);}}catch(e){}}};
          this.continueRun = function(){};
          this.done = function(){setTimeout("$pdc._done();",5000);}
          this._done = function(){for(var i = 0 ; i < this.listeners.length; i++){try{if(this.listeners[i].done){this.listeners[i].done();}}catch(e){}}this.continueRun();};
          this.collectStarted = function(){this.onProgress(0);try{window.external.ExecuteJs("signal_test_started",$pdc.testId);}catch(e){}};
          this.collectEnded = function(){this.onProgress(-1);try{window.external.ExecuteJs("signal_test_ended",$pdc.testId);}catch(e){}};
          this.preCollection = function(){for(var i = 0 ; i < this.listeners.length; i++){try{if(this.listeners[i].preCollection){this.listeners[i].preCollection();}}catch(e){}}};
          this.startCollection = function(){this.preCollection();this.redirectPage(this.requestUrl);}
          this.redirectPage = function(_u){try{window.external.ExecuteJs("redirect", _u);}catch(e){}};
          this.onProgress = function(_a){try{window.external.ExecuteJs("onProgress", this.tests + ";" + _a + ";" + this.breaks);}catch(e){}}
       }
       ]]></jsmain>
      <jssettestid><![CDATA[$pdc = new PageDataCollector({0},{1},{2},"{3}","{4}");]]></jssettestid>
      
      <!-- PreCollection -->
      <html><![CDATA[<html><head><script>{0}</script></head><body></body><script>{1}</script></html>]]></html>
      <jsprecollection><![CDATA[setTimeout("$pdc.startCollection();",200);]]></jsprecollection>

      <!-- Collection -->
      <jsinit><![CDATA[$pdc.init();]]></jsinit>
      <jssection><![CDATA[$pdc.endSection({0},"{1}");]]></jssection>
      <jsdone><![CDATA[$pdc.done();]]></jsdone>
      <jsnextcollect><![CDATA[$pdc.continueRun = function(){{$pdc.nextCollect("{0}");}};]]></jsnextcollect>
      <jscollectstarted><![CDATA[$pdc.collectStarted();]]></jscollectstarted>
      <jscollectended><![CDATA[$pdc.continueRun = function(){$pdc.collectEnded();};]]></jscollectended>
  </global>

  <collectors>
    <collector standalone="false" name="Render">
        <![CDATA[
        var _collectedRenderData = "";
        var _lastE;
        
        window.onload = function(){
          markRenderTest(99,"OL");
        }
        
        document.onreadystatechange = function(){
          var rs = document.readyState;
          if(rs == "uninitialized"){
            markRenderTest(99,"UN");
          }else if(rs == "loading"){
            markRenderTest(99,"LI");
          }else if(rs == "loaded"){
            markRenderTest(99,"LO");
          }else if(rs == "interactive"){
            markRenderTest(99,"IN");
          }else if(rs == "complete"){
            markRenderTest(99,"CO");
          }
        }
        
        function getEpoch(){
          return (new Date()/1000)*1000;
        }

        function markRenderTest(_id,_t) {
          var e = getEpoch();
          _collectedRenderData += "S" + _id + ((_t) ? "|" + _t + "|" : "") + ":" + _lastE + ";E" + _id + ((_t) ? "|" + _t + "|" : "") + ":" + e + ";"; 
          _lastE = e;
        }
        
        $pdc.addListener({
          init : function() {
            _lastE = getEpoch();
            markRenderTest(0);
          }, 
          
          endSection : function(_id,_t){
            markRenderTest((_id + 1),_t);
          },
          
          done : function(){
            window.external.ExecuteJs("saveData","renderdump_" + $pdc.testId + ".dat;" + _collectedRenderData);
          }
        });
        ]]>
    </collector>
    
    <collector standalone="true" name="Screenshots_Small">
      <![CDATA[
        function getPhotoId(_id){
          var s = "" + _id;
          while(s.length < 5) s = "0" + s;return s;
        }
        
        $pdc.addListener({
          endSection : function(_id,_t){
            window.external.ExecuteJs("getSnapshot","TC_" + $pdc.testId + "_" + getPhotoId(_id) + ".jpg~248~183~0");
          }
        });]]>
    </collector>

    <collector standalone="true" name="Screenshots_Full">
        <![CDATA[
        function getPhotoId(_id){
          var s = "" + _id;
          while(s.length < 5) s = "0" + s;return s;
        }
        
        $pdc.addListener({
          endSection : function(_id,_t){
            window.external.ExecuteJs("getSnapshot","TC_" + $pdc.testId + "_" + getPhotoId(_id) + ".jpg");
          }
        });
        ]]>
    </collector>
    
    <collector standalone="false" name="Download_Proxy">
        <![CDATA[
        // Provide the XMLHttpRequest class for IE 5.x-6.x:
        // will break on non-IE browsers XMLHttpRequest is pre defined
        function getXMLHttpRequest(){
          if( typeof XMLHttpRequest == "undefined" ){
            try { return new ActiveXObject("Msxml2.XMLHTTP.6.0") } catch(e) {}
            try { return new ActiveXObject("Msxml2.XMLHTTP.3.0") } catch(e) {}
            try { return new ActiveXObject("Msxml2.XMLHTTP") } catch(e) {}
            try { return new ActiveXObject("Microsoft.XMLHTTP") } catch(e) {}
         }else{
          return new XMLHttpRequest();
         }
        }
        function messageProxy(_r){
          var client = getXMLHttpRequest();client.open("GET", "/?" + _r + "=" + $pdc.testId + "~" + $pdc.requestEncodedUrl, false);
          client.send();
        }
        $pdc.addListener({
          preCollection : function(){
            messageProxy("START_TRACKING");
          },
          done : function(){
            messageProxy("STOP_TRACKING");
          }
        });
       ]]>
    </collector>
    
    <collector standalone="false" name="Performance">
        <![CDATA[
        $pdc.addListener({
          preCollection : function(){
            window.external.ExecuteJs("startperftest","");
          },
          done : function(){
            window.external.ExecuteJs("endperftest","perfdump_" + $pdc.testId + ".dat");
          }
        });
        ]]>
    </collector>

    <collector standalone="false" name="Download_Sniffer">
        <![CDATA[
        $pdc.addListener({
          preCollection : function(){
            window.external.ExecuteJs("start_or_continue_sniffing",$pdc.testId);
          },
          done : function(){
            window.external.ExecuteJs("stop_sniffing","wdownload_" + $pdc.testId + ".dat");
          }
        });
        ]]>
    </collector>
  </collectors>
</config>
